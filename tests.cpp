// Test definitions. Do NOT edit this file!

#include <tuple>

//#define CATCH_CONFIG_MAIN // defines main() automatically
#include "lib/catch.hpp"
#include "bintree.hpp"

// =====================
// Bintree Testcases
// ---------------------

TEST_CASE("Test1", "insert")
{
    binTree *tree = t_init();
    insert(tree, "ABC", "ABC");
    INFO("No Node was inserted into the tree");
    REQUIRE(tree->root != nullptr);
}

TEST_CASE("Test2", "insert")
{
    binTree *tree = t_init();
    insert(tree, "ABC", "ABC");
    REQUIRE(tree->root != nullptr);
    INFO("Key needs to be inserted as C-String!");
    REQUIRE(strlen(tree->root->key) + 1 == 4);
}

TEST_CASE("Test3", "insert")
{
    binTree *tree = t_init();
    insert(tree, "ABC", "ABC");
    REQUIRE(tree->root != nullptr);
    insert(tree, "AAA", "AAA");
    insert(tree, "ABD", "ABD");
    insert(tree, "AAB", "AAB");
    INFO("Testing insert for keys: 'ABC' + 'AAA' + 'ABD'.");
    REQUIRE(tree->root->left != nullptr);
    REQUIRE(tree->root->right != nullptr);
    REQUIRE(tree->root->left->right != nullptr);
    REQUIRE(strcmp(tree->root->left->key,"AAA")==0);
    REQUIRE(strcmp(tree->root->right->key,"ABD")==0);
    REQUIRE(strcmp(tree->root->left->right->key,"AAB")==0);
    REQUIRE(tree->size == 4);
}

TEST_CASE("Test4", "insert")
{
    binTree *tree = t_init();
    insert(tree, "ABC", "ABC");
    REQUIRE(tree->root != nullptr);
    insert(tree, "AAA", "AAA");
    insert(tree, "ABD", "ABD");
    insert(tree, "AAB", "AAB");
    INFO("Testing insert for keys: 'ABC' + 'AAA' + 'ABD' + 'AAB' && count on each node.");
    REQUIRE(tree->root->left != nullptr);
    REQUIRE(tree->root->right != nullptr);
    REQUIRE(tree->root->left->right != nullptr);
    REQUIRE(strcmp(tree->root->left->key,"AAA")==0);
    REQUIRE(strcmp(tree->root->right->key,"ABD")==0);
    REQUIRE(strcmp(tree->root->left->right->key,"AAB")==0);
    REQUIRE(tree->size == 4);
    REQUIRE(tree->root->count == 4);
    REQUIRE(tree->root->left->count == 2);
    REQUIRE(tree->root->right->count == 1);
    REQUIRE(tree->root->left->right->count == 1);
}

TEST_CASE("Test5", "printTreeInOrder"){
    binTree *tree = t_init();
    insert(tree, "ABC", "ABC");
    insert(tree, "AAA", "AAA");
    insert(tree, "ABD", "ABD");
    insert(tree, "AAB", "AAB");
    printf("Trying to print tree inOrder. Will be graded manually. (1 Point)\n");
    printTreeInOrder(tree->root);
}

TEST_CASE("Test6", "testPrintTreeInOrder"){
    printf("Trying to print your name. Will be graded manually. (3 Points)\n");
    testPrintTreeInOrder();
}

TEST_CASE("Test7", "validateTree"){
    binTree *tree = t_init();
    insert(tree, "H", "H");
    insert(tree, "A", "A");
    insert(tree, "Z", "Z");
    insert(tree, "B", "B");
    INFO("Testing if the validation function works correctly.");
    REQUIRE(tree->root != nullptr);
    REQUIRE(tree->root->left != nullptr);
    REQUIRE(tree->root->right != nullptr);
    REQUIRE(tree->root->left->right != nullptr);
    tree->root->left->right->key[0] = 'I';
    REQUIRE(validate(tree->root, 'A', 'Z')==0);
}

TEST_CASE("Test8", "validateTree"){
    binTree *tree = t_init();
    insert(tree, "H", "H");
    insert(tree, "A", "A");
    insert(tree, "Z", "Z");
    insert(tree, "B", "B");
    INFO("Testing if the validation function works correctly.");
    REQUIRE(tree->root != nullptr);
    REQUIRE(tree->root->left != nullptr);
    REQUIRE(tree->root->right != nullptr);
    REQUIRE(tree->root->left->right != nullptr);
    REQUIRE(validate(tree->root, 'A', 'Z')==1);
}
